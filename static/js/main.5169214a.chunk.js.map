{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","commits","reverse","map","com","project","commit","branch","remote","date","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAiDeA,mLA3CX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,4CAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,6BAAmDH,EAAAC,EAAAC,cAAA,oCAAnD,KACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,wBADF,YACgCF,EAAAC,EAAAC,cAAA,0BADhC,kBACsEF,EAAAC,EAAAC,cAAA,+BADtE,cAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,wBADF,yBAC6CF,EAAAC,EAAAC,cAAA,qBAD7C,+CAEoBF,EAAAC,EAAAC,cAAA,4BAFpB,KAIAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,wBAA8CH,EAAAC,EAAAC,cAAA,sBAA9C,KACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,eAAqCH,EAAAC,EAAAC,cAAA,gCAArC,KAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,YAAkCH,EAAAC,EAAAC,cAAA,uCAAlC,KACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iBAAuCH,EAAAC,EAAAC,cAAA,oCAAvC,8DAIJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,sBAA8CH,EAAAC,EAAAC,cAAA,WAC3CE,EAAQC,UAAUC,IAAI,SAAAC,GACrB,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBI,EAAIC,SACpCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,mBAAiDI,EAAIE,QACrDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,aAA2CI,EAAIG,QAC/CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,sBAAgDI,EAAII,OAApD,KACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeI,EAAIK,mBAnChCC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5169214a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport commits from \"./commits.json\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-parent\">\n      \n        <div className=\"welcome\">\n          <div className=\"name\">Luis Revilla</div>\n          <div className=\"intro-text\">Fullstack developer based in Manhattan.</div>\n        </div>\n        <div className=\"feature-block\">\n        <div className=\"feature\">Author of code running on <span>thousands of devices</span>.</div>\n          <div className=\"feature\">\n            <span>3+ years</span> writing <span>Javascript</span>, both for the <span>web and Node.js</span> programs.\n          </div>\n          <div className=\"feature\">\n            <span>2+ years</span> programming UIs with <span>React</span>. 1+ year building mobile\n            applications with <span>React Native</span>.\n          </div>\n          <div className=\"feature\">Strong intuition for <span>design</span>.</div>\n          <div className=\"feature\">Exceptional <span>ability to learn</span>.</div>\n\n            <div className=\"feature\">Focus on <span>testing and performance</span>.</div>\n            <div className=\"feature\">Extraordinary <span>communication skills</span>. Background in journalism, broadcasting and advertising.</div>\n\n        </div>\n\n        <div>\n        <div className=\"work\">See what I'm up to</div><div>\n          {commits.reverse().map(com => {\n            return (\n              <div className=\"Commit\">\n                <div className=\"project-title\">{com.project}</div>\n                <div className=\"commit-message\">Commit message: {com.commit}</div>\n                <div className=\"working-branch\">On branch {com.branch}</div>\n                <div className=\"git-remote\">Remote repository: {com.remote} </div>\n                <div className=\"commit-date\">{com.date}</div>\n              </div>\n            );\n          })}\n        </div></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}